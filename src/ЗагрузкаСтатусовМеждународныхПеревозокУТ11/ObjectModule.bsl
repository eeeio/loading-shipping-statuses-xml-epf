#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Информация = НСтр("ru = 'Обработка загрузки статусов международных перевозок по файлу XML жестко заданной структуры (вер.1.0)""'");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта();
	ПараметрыРегистрации.Версия = "1.0";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	//ПараметрыРегистрации.Назначение.Добавить("Документ.ТаможеннаяДекларацияИмпорт");
	
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Заполнить реквизит ""Полное наименование"" (вызов серверной процедуры)'");
	//Команда.Идентификатор = "ЗаполнитьПолноеНаименование";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//Команда.ПоказыватьОповещение = Истина;
	
	// См. реализацию команды в процедуре ДобавитьПрефиксКНаименованию модуля формы обработки.
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Заполнить по файлу XML'");
	Команда.Идентификатор = "ЗагрузитьИзФайлаXML";
	Команда.Использование = "ОткрытиеФормы";
	Команда.ПоказыватьОповещение = Ложь;
	
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Комплексная очистка (вызов серверной процедуры)'");
	//Команда.Идентификатор = "ОчиститьВсе";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//Команда.ПоказыватьОповещение = Ложь;
	//
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля формы обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Комплексное заполнение (вызов клиентской процедуры)'");
	//Команда.Идентификатор = "ЗаполнитьВсе";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовКлиентскогоМетода();
	//Команда.ПоказыватьОповещение = Истина;
	//
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Заполнить реквизит ""ИНН"" не записывая объект (заполнение формы)'");
	//Команда.Идентификатор = "ЗаполнитьИНН";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыЗаполнениеФормы();
	//Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Обработчик серверных команд.
//
// Параметры:
//   ИдентификаторКоманды - Строка - Имя команды, определенное в функции СведенияОВнешнейОбработке().
//   ОбъектыНазначения    - Массив - Ссылки объектов, для которых вызвана команда.
//       - Неопределено - для команд "ЗаполнениеФормы".
//   ПараметрыВыполнения  - Структура - Контекст выполнения команды.
//       * ДополнительнаяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Ссылка обработки.
//           Может использоваться для чтения параметров обработки.
//           Пример см. в комментарии к функции ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы().
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, ПараметрыВыполнения) Экспорт
	
	//ДатаЗавершенияВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах() + 4;
	
	Если ИдентификаторКоманды = "ЗагрузитьИзФайлаXML" Тогда
		ЗагрузитьИзФайлаXML(ОбъектыНазначения, ПараметрыВыполнения);
	//Если ИдентификаторКоманды = "ЗаполнитьИНН" Тогда
	//	ЗаполнитьИНН(ПараметрыВыполнения.ЭтаФорма);
	//ИначеЕсли ИдентификаторКоманды = "ЗаполнитьПолноеНаименование" Тогда
	//	ЗаполнитьКонтрагентов(ОбъектыНазначения, Истина, Ложь);
	//ИначеЕсли ИдентификаторКоманды = "ЗаполнитьВсе" Тогда
	//	ЗаполнитьКонтрагентов(ОбъектыНазначения, Истина, Истина);
	//ИначеЕсли ИдентификаторКоманды = "ДобавитьПрефиксКНаименованию" Тогда
	//	ЗаполнитьКонтрагентов(ОбъектыНазначения, Ложь, Истина);
	//ИначеЕсли ИдентификаторКоманды = "ОчиститьВсе" Тогда
	//	ОчиститьРеквизитыКонтрагентов(ОбъектыНазначения);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Команда ""%1"" не поддерживается обработкой ""%2""'"),
			ИдентификаторКоманды,
			Метаданные().Представление());
	КонецЕсли;
	
	//// Имитация длительной операции.
	//Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < ДатаЗавершенияВМиллисекундах Цикл
	//КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик команд ЗагрузитьИзФайлаXML
Процедура ЗагрузитьИзФайлаXML(ОбъектыНазначения, ПараметрыВыполнения) Экспорт
	
	//Если ОбъектыНазначения.Количество() = 0 Тогда
	//	ВызватьИсключение НСтр("ru = 'Не выбраны документы для заполнения'");
	//КонецЕсли;
	
	Ошибки 	= Новый Массив;
	// образец добавления ошибки
	//		Ошибки.Добавить(
	//			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//				НСтр("ru = 'Объект ""%1"" не обработан: реквизит ""НаименованиеПолное"" не пустой.'"),
	//				Строка(ОбъектНазначения)));
	
	ЗаголовокОповещения = ""; 	
	//ЗаголовокОповещения = НСтр("ru = 'Заполнены данные'");
	
	ДанныеXML = РазобратьXMLФабрикаXDTO(ПараметрыВыполнения.АдресХранилищаФайла);
	
	//// Заполнение объектов
	//Для Каждого ЭлементОбъектНазначения Из ОбъектыНазначения Цикл
	//	
	//	ОбъектНазначения = ЭлементОбъектНазначения.ПолучитьОбъект();
	
		ОбъектНазначения = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
		тзПромежуточныйПриемник = ОбъектНазначения.ВыгрузитьКолонки();
		//ОбъектНазначения.Отбор.Период.Установить(НачалоДня(ТекущаяДата()));
		//ОбъектНазначения.Прочитать();
		
		Для Каждого иСтатусПеревозки Из ДанныеXML Цикл
			
			Нов = тзПромежуточныйПриемник.Добавить();
			
			ЗаполнитьЗначенияСвойств(Нов, иСтатусПеревозки);
			
			//ЗаполнитьЗначенияСвойств(ОбъектНазначения, иДокумент, "НомерДекларации, ТаможенныйСбор");
			//
			////Если Ложь Тогда 
			////	ОбъектНазначения = Документы.ТаможеннаяДекларацияИмпорт.СоздатьДокумент();
			////КонецЕсли;
			//
			//ОбъектНазначения.Разделы.Очистить();
			//Для Каждого иРаздел Из иДокумент.Разделы Цикл
			//	НоваяСтрокаРазделов 					= ОбъектНазначения.Разделы.Добавить();
			//	//НоваяСтрокаРазделов.НомерДляСФ 		= ;
			//	НоваяСтрокаРазделов.НомерРаздела 		= иРаздел.НомерРаздела;
			//	//НоваяСтрокаРазделов.Склад 			= ;
			//	НоваяСтрокаРазделов.СтавкаНДС 			= ОбменССайтамиУТ.СтавкаНДСПоЗначениюПриЗагрузке(иРаздел.СтавкаНДС);
			//	НоваяСтрокаРазделов.СтавкаПошлины 		= Число(?(ЗначениеЗаполнено(иРаздел.СтавкаПошлины), иРаздел.СтавкаПошлины, 0));
			//	НоваяСтрокаРазделов.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоНаименованию(иРаздел.СтранаПроисхождения, Истина);
			//	НоваяСтрокаРазделов.СуммаНДС 			= иРаздел.СуммаНДС;
			//	НоваяСтрокаРазделов.СуммаПошлины 		= иРаздел.СуммаПошлины;
			//	НоваяСтрокаРазделов.ТаможеннаяСтоимость = иРаздел.ТаможеннаяСтоимость;
			//КонецЦикла;
			//
			//Если иДокумент.Товары.Количество() = 0 Тогда 
			//	// это странно - тут должны были быть товары... не будем ничего делать!
			//	//Для Каждого иТовар Из иДокумент.Товары Цикл
			//	//	НоваяСтрокаТоваров 								= ОбъектНазначения.Товары.Добавить();
			//	//	//НоваяСтрокаТоваров.АналитикаУчетаНоменклатуры 	= ;
			//	//	//НоваяСтрокаТоваров.ВидЗапасов 					= ;
			//	//	НоваяСтрокаТоваров.ДокументПоступления 			= Неопределено;
			//	//	//НоваяСтрокаТоваров.ЗакупкаПодДеятельность 		= ;
			//	//	//НоваяСтрокаТоваров.Количество 					= ;
			//	//	//НоваяСтрокаТоваров.КоличествоУпаковок 			= ;
			//	//	//НоваяСтрокаТоваров.Назначение					= ;
			//	//	//НоваяСтрокаТоваров.Номенклатура 				= ;
			//	//	НоваяСтрокаТоваров.НомерГТД 					= ОбъектНазначения.НомерДекларации;
			//	//	//НоваяСтрокаТоваров.НомерДляСФ 					= ;
			//	//	//НоваяСтрокаТоваров.НомерРаздела 				= ;
			//	//	//НоваяСтрокаТоваров.Серия 						= ;
			//	//	//НоваяСтрокаТоваров.Склад 						= ;
			//	//	//НоваяСтрокаТоваров.СтатусУказанияСерий 			= ;
			//	//	//НоваяСтрокаТоваров.СтранаПроисхождения 			= ;
			//	//	//НоваяСтрокаТоваров.СуммаНДС 					= ;
			//	//	//НоваяСтрокаТоваров.СуммаПошлины 				= ;
			//	//	//НоваяСтрокаТоваров.ТаможеннаяСтоимость 			= ;
			//	//	//НоваяСтрокаТоваров.Упаковка 					= ;
			//	//	//НоваяСтрокаТоваров.Характеристика 				= ;
			//	//	//НоваяСтрокаТоваров.ХозяйственнаяОперация 		= ;					
			//	//КонецЦикла;
			//Иначе
			//	// нужно попытаться распределить существующие товары по разделам (по сумме легко, если она совпадает и уникальна)
			//	// проставить НомерГТД из шапки документа + номер товара/раздела (могли перезаполнить)
			//	
			//	тзНоменклатура = ПолучитьТаблицуНоменклатурыСРеквизитами(ОбъектНазначения.Товары.ВыгрузитьКолонку("Номенклатура"), "Ссылка, Артикул, Наименование");
			//	
			//	Для Каждого иСтрокаТЧТовары Из ОбъектНазначения.Товары Цикл
			//		иСтрокаТЧТовары.НомерРаздела = 0;
			//	КонецЦикла;	
			//	
			//	Для Каждого иСтрокаТовара Из иДокумент.Товары Цикл
			//		
			//		// 1. ищем по наименованию? 	(Номенклатура)
			//		// 2. ищем по артикулу?     	(Артикул)
			//		// 3. ищем количество ?  		(КоличествоУпаковок, Упаковка)
			//		// 4. ищем по производителю? 	(Производитель)
			//		// 5. помещаем найденную строку ТЧ в текущий раздел (НомерРаздела)
			//		
			//		тзНайденоПоНаименованию = НайтиПохожиеПоНаименованию(иСтрокаТовара.Номенклатура, тзНоменклатура);
			//		Если ЗначениеЗаполнено(иСтрокаТовара.Артикул) Тогда 
			//			мсвНайденоПоАртикулу = тзНоменклатура.НайтиСтроки(Новый Структура("Артикул", иСтрокаТовара.Артикул)); 
			//		Иначе
			//			мсвНайденоПоАртикулу = Новый Массив;
			//		КонецЕсли;
			//		//мсвНайденоПоКоличеству 	= ОбъектНазначения.Товары.НайтиСтроки(Новый Структура("КоличествоУпаковок", иСтрокаТовара.КоличествоУпаковок));
			//		
			//		// как совместить результаты поиска, чтобы подбор был наиболее точен? 
			//		
			//		Если мсвНайденоПоАртикулу.Количество() > 0 Тогда						
			//			// совпадение по артикулу - это важный признак
			//			мсвИскомые = мсвНайденоПоАртикулу; 
			//		Иначе
			//			Если тзНайденоПоНаименованию.Количество() > 0 И тзНайденоПоНаименованию[0].Процент = 100 Тогда 
			//				// полное совпадение по наименованию - это важный признак
			//				мсвИскомые = тзНайденоПоНаименованию.Скопировать(тзНайденоПоНаименованию.НайтиСтроки(Новый Структура("Процент", 100))).ВыгрузитьКолонку("Ссылка"); 
			//			ИначеЕсли тзНайденоПоНаименованию.Количество() > 0 Тогда
			//				мсвИскомые = тзНайденоПоНаименованию.ВыгрузитьКолонку("Ссылка");
			//			Иначе
			//				мсвИскомые = Новый Массив;
			//			КонецЕсли;
			//		КонецЕсли;
			//		
			//		// теперь поищем совпадение по количеству
			//		ИскомоеКоличество = иСтрокаТовара.КоличествоУпаковок;
			//		
			//		// вопрос: что важнее - больший процент сходности по наименованию или точное совпадение по количеству упаковок?
			//		Для Каждого иНом Из мсвИскомые Цикл
			//			// точное совпадение по количеству - берем!
			//			СтрокиДокументаПоТовару = ОбъектНазначения.Товары.НайтиСтроки(Новый Структура("Номенклатура, КоличествоУпаковок", иНом, иСтрокаТовара.КоличествоУпаковок));
			//			Если СтрокиДокументаПоТовару.Количество() > 0 Тогда 
			//				СтрокиДокументаПоТовару[0].НомерРаздела = иСтрокаТовара.НомерРаздела;
			//				ИскомоеКоличество = 0; 
			//				Прервать;
			//			КонецЕсли;
			//		КонецЦикла;
			//		
			//		Если ИскомоеКоличество > 0 Тогда 
			//			ИскомоеКоличество = иСтрокаТовара.КоличествоУпаковок;
			//			Для Каждого иНом Из мсвИскомые Цикл							
			//				СтрокиДокументаПоТовару = ОбъектНазначения.Товары.НайтиСтроки(Новый Структура("Номенклатура", иНом));
			//				Для Каждого иСтрокаДокумента Из СтрокиДокументаПоТовару Цикл
			//					Если иСтрокаДокумента.КоличествоУпаковок <= ИскомоеКоличество Тогда 
			//						иСтрокаДокумента.НомерРаздела = иСтрокаТовара.НомерРаздела;
			//						ИскомоеКоличество = ИскомоеКоличество - иСтрокаДокумента.КоличествоУпаковок;
			//					КонецЕсли;
			//				КонецЦикла;
			//				Если ИскомоеКоличество = 0 Тогда 
			//					Прервать;
			//				КонецЕсли;
			//			КонецЦикла;	
			//		КонецЕсли;
			//		
			//	КонецЦикла;
			//КонецЕсли;  			
			//
			//Незаполненные = ОбъектНазначения.Товары.НайтиСтроки(Новый Структура("НомерРаздела", 0));
			//Для Каждого иСтрока Из Незаполненные Цикл
			//	//Ошибки.Добавить(
			//	Сообщение 				= Новый СообщениеПользователю;
			//	Сообщение.КлючДанных 	= ЭлементОбъектНазначения;
			//	Сообщение.ПутьКДанным  	= "Объект";
			//	Сообщение.Поле  		= СтрШаблон("Товары[%1].Номенклатура", иСтрока.НомерСтроки-1);
			//	Сообщение.Текст 		= 
			//		СтрШаблон(
			//		НСтр("ru = 'Строка %1 (""%2"") не найдена в файле XML: реквизит ""Номер раздела"" не заполнен.'"),
			//		Строка(иСтрока.НомерСтроки),
			//		Строка(иСтрока.Номенклатура));
			//	Сообщение.Сообщить();
			//КонецЦикла;
			//
			////ЗаголовокОповещения = НСтр("ru = 'Заполнены данные:'");
			////Для Каждого иРеквизит Из иДокумент Цикл
			////	Если ЗначениеЗаполнено(иРеквизит.Значение) Тогда 
			////		ЗаголовокОповещения = ЗаголовокОповещения + Символы.ПС + иРеквизит.Ключ;
			////	КонецЕсли;   				
			////КонецЦикла;
			//
			//Прервать; // в данном случае массив ДанныеXML всегда из одного элемента т.к. заполняем единственный документ
		КонецЦикла;
		
		ОбъектНазначения.Записать();
		
	//	Прервать; // в данном случае массив ОбъектыНазначения всегда из одного элемента т.к. заполняем единственный документ
	//КонецЦикла;		
	
	ВывестиОповещение(ОбъектыНазначения, ЗаголовокОповещения, Ошибки);
	
КонецПроцедуры

Функция РазобратьXMLФабрикаXDTO(АдресХранилищаФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЧтениеXML = Новый ЧтениеXML;
	ФайлXML = ПолучитьИзВременногоХранилища(АдресХранилищаФайла);	
	
	Поток = ФайлXML.ОткрытьПотокДляЧтения();	
	ЧтениеXML.ОткрытьПоток(Поток); 	
	
	// Использование фабрики XDTO без привлечения XDTO пакетов 	
	ГТД_XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	// предполагаем, что файл имеет жесткую структуру 
	
	РезультатРазборки = Новый Массив;	
	
	
	//КодТаможенныйСбор 	= "1010";
	//КодПошлина 			= "2010";
	//КодНДС 				= "5010";
	////КодТаможенныйШтраф	= ?; 
	//
	//ДокументГТД = Новый Структура("НомерДекларации, ТаможенныйСбор, ТаможенныйШтраф, Товары, Разделы", "", 0, 0, Новый Массив, Новый Массив);
	//
	//ДокументГТД.НомерДекларации = 
	//УбратьМусорныеСимволыИзСтроки(ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[0].DocBody.Signature.Object.GTDoutCustomsMark.GTDID.CustomsCode)
	//+ "/" + Формат(Дата(СтрЗаменить(УбратьМусорныеСимволыИзСтроки(ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[0].DocBody.Signature.Object.GTDoutCustomsMark.GTDID.RegistrationDate),"-","")), "ДФ=ddMMyyyy")
	//+ "/" + УбратьМусорныеСимволыИзСтроки(ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[0].DocBody.Signature.Object.GTDoutCustomsMark.GTDID.GTDNumber);
	//
	//СтранаПроисхождения = УбратьМусорныеСимволыИзСтроки(ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[1].DocBody.Signature.Object.ESADout_CU.ESADout_CUGoodsShipment.OriginCountryName);
	//
	//ПошлиныИСборы = ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[1].DocBody.Signature.Object.ESADout_CU.ESADout_CUGoodsShipment.ESADout_CUPayments.ESADout_CUCustomsPayment;
	//Если ТипЗнч(ПошлиныИСборы) <> Тип("СписокXDTO") Тогда 
	//	СписокПошлиныИСборы = Новый Массив;
	//	СписокПошлиныИСборы.Добавить(ПошлиныИСборы);
	//Иначе
	//	СписокПошлиныИСборы = ПошлиныИСборы;
	//КонецЕсли;
	//Для Каждого иСтрокаПошлиныИСборы Из СписокПошлиныИСборы Цикл
	//	Если иСтрокаПошлиныИСборы.PaymentModeCode = КодТаможенныйСбор Тогда 
	//		ДокументГТД.ТаможенныйСбор = ДокументГТД.ТаможенныйСбор + Число(иСтрокаПошлиныИСборы.PaymentAmount);
	//	КонецЕсли;
	//КонецЦикла;
	//
	////РазделыГТД 	= ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[2].DocBody.Signature.Object.DTSout_CU.DTSout_CUGoodsCustomsCost;
	//РазделыГТД = ГТД_XDTO.Body.Signature.Object.ED_Container.ContainerDoc[1].DocBody.Signature.Object.ESADout_CU.ESADout_CUGoodsShipment.ESADout_CUGoods;
	//Если ТипЗнч(РазделыГТД) <> Тип("СписокXDTO") Тогда 
	//	СписокРазделыГТД = Новый Массив;
	//	СписокРазделыГТД.Добавить(РазделыГТД);
	//Иначе
	//	СписокРазделыГТД = РазделыГТД;
	//КонецЕсли;
	//Для Каждого иСтрокаРаздела Из СписокРазделыГТД Цикл
	//	СтрокаРазделаСтруктура = Новый Структура(
	//	"НомерДляСФ, НомерРаздела, Склад, СтавкаНДС, 
	//	|СтавкаПошлины, СтранаПроисхождения, СуммаНДС, СуммаПошлины, ТаможеннаяСтоимость");
	//	
	//	СуммаПошлиныРаздела 	= 0;
	//	СуммаНДСРаздела 		= 0;
	//	СтавкаПошлиныРаздела 	= "";
	//	СтавкаНДСРаздела 		= "";
	//	ПошлиныИСборыРаздела = иСтрокаРаздела.ESADout_CUCustomsPaymentCalculation;
	//	Если ТипЗнч(ПошлиныИСборыРаздела) <> Тип("СписокXDTO") Тогда 
	//		СписокПошлиныИСборыРаздела = Новый Массив;
	//		СписокПошлиныИСборыРаздела.Добавить(ПошлиныИСборыРаздела);
	//	Иначе
	//		СписокПошлиныИСборыРаздела = ПошлиныИСборыРаздела;
	//	КонецЕсли;
	//	Для Каждого иСтрокаПошлиныИСборы Из СписокПошлиныИСборыРаздела Цикл
	//		Если иСтрокаПошлиныИСборы.PaymentModeCode = КодПошлина Тогда 
	//			СуммаПошлиныРаздела 	= СуммаПошлиныРаздела + Число(иСтрокаПошлиныИСборы.PaymentAmount);
	//			СтавкаПошлиныРаздела 	= иСтрокаПошлиныИСборы.Rate;
	//		ИначеЕсли иСтрокаПошлиныИСборы.PaymentModeCode = КодНДС Тогда 
	//			СуммаНДСРаздела 		= СуммаНДСРаздела + Число(иСтрокаПошлиныИСборы.PaymentAmount);
	//			СтавкаНДСРаздела 		= иСтрокаПошлиныИСборы.Rate;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	//СтрокаРазделаСтруктура.НомерДляСФ 		= иСтрокаРаздела.SheetGoodsSerialNumber; ?
	//	СтрокаРазделаСтруктура.НомерРаздела 		= Число(иСтрокаРаздела.GoodsNumeric); //GTDGoodsNumber;
	//	//СтрокаРазделаСтруктура.Склад 				= ;
	//	СтрокаРазделаСтруктура.СтавкаНДС 			= СтавкаНДСРаздела;
	//	СтрокаРазделаСтруктура.СтавкаПошлины 		= СтавкаПошлиныРаздела;
	//	СтрокаРазделаСтруктура.СтранаПроисхождения 	= СтранаПроисхождения;
	//	СтрокаРазделаСтруктура.СуммаНДС 			= СуммаНДСРаздела;
	//	СтрокаРазделаСтруктура.СуммаПошлины 		= СуммаПошлиныРаздела;
	//	СтрокаРазделаСтруктура.ТаможеннаяСтоимость 	= Число(иСтрокаРаздела.CustomsCost); //NationalDeclaredCustomsCost;
	//	
	//	ДокументГТД.Разделы.Добавить(СтрокаРазделаСтруктура);
	//	
	//	ТоварыРаздела = иСтрокаРаздела.GoodsGroupDescription;
	//	Если ТипЗнч(ТоварыРаздела) <> Тип("СписокXDTO") Тогда 
	//		СписокТоварыРаздела = Новый Массив;
	//		СписокТоварыРаздела.Добавить(ТоварыРаздела);
	//	Иначе
	//		СписокТоварыРаздела = ТоварыРаздела;
	//	КонецЕсли;
	//	Для Каждого иСтрокаТовара Из СписокТоварыРаздела Цикл
	//		СтрокаТовараСтруктура = Новый Структура("НомерРаздела, КоличествоУпаковок, Номенклатура, Упаковка, Производитель, Артикул");
	//		//"АналитикаУчетаНоменклатуры, ВидЗапасов, ДокументПоступления, ЗакупкаПодДеятельность, 
	//		//"Количество, КоличествоУпаковок, Назначение, Номенклатура,
	//		//|НомерГТД, НомерДляСФ, НомерРаздела, Серия,
	//		//|Склад, СтатусУказанияСерий, СтранаПроисхождения, СуммаНДС,
	//		//|СуммаПошлины, ТаможеннаяСтоимость, Упаковка, Характеристика, ХозяйственнаяОперация");
	//		
	//		//СтрокаТовараСтруктура.Количество 			= иСтрокаТовара.GoodsGroupQuantity.GoodsQuantity;
	//		СтрокаТовараСтруктура.КоличествоУпаковок 	= Число(иСтрокаТовара.GoodsGroupInformation.GoodsGroupQuantity.GoodsQuantity);
	//		//СтрокаТовараСтруктура.Назначение 			= ;
	//		СтрокаТовараСтруктура.Номенклатура 			= УбратьМусорныеСимволыИзСтроки(иСтрокаТовара.GoodsDescription);
	//		//СтрокаТовараСтруктура.НомерГТД 			= ;
	//		//СтрокаТовараСтруктура.НомерДляСФ 			= ;
	//		СтрокаТовараСтруктура.НомерРаздела 			= Число(иСтрокаРаздела.GoodsNumeric);
	//		//СтрокаТовараСтруктура.Серия 				= ;
	//		//СтрокаТовараСтруктура.Склад 				= ;
	//		//СтрокаТовараСтруктура.СтатусУказанияСерий = ;
	//		//СтрокаТовараСтруктура.СтранаПроисхождения = СтранаПроисхождения;
	//		//СтрокаТовараСтруктура.СуммаНДС 			= ;
	//		//СтрокаТовараСтруктура.СуммаПошлины 		= ;
	//		//СтрокаТовараСтруктура.ТаможеннаяСтоимость = ;
	//		СтрокаТовараСтруктура.Упаковка 				= иСтрокаТовара.GoodsGroupInformation.GoodsGroupQuantity.MeasureUnitQualifierCode; // лучше код, а не имя, как в MeasureUnitQualifierName;
	//		//СтрокаТовараСтруктура.Характеристика 		= ;
	//		//СтрокаТовараСтруктура.ХозяйственнаяОперация = ;
	//		СтрокаТовараСтруктура.Производитель 		= УбратьМусорныеСимволыИзСтроки(иСтрокаТовара.GoodsGroupInformation.TradeMark);
	//		СтрокаТовараСтруктура.Артикул 				= УбратьМусорныеСимволыИзСтроки(иСтрокаТовара.GoodsGroupInformation.GoodsModel);
	//		
	//		ДокументГТД.Товары.Добавить(СтрокаТовараСтруктура);
	//		
	//	КонецЦикла;				
	//КонецЦикла; 	
	//
	//РезультатРазборки.Добавить(ДокументГТД);		
	
	Возврат РезультатРазборки;
	
КонецФункции

Функция ПолучитьТаблицуНоменклатурыСРеквизитами(мсвНоменклатура, ИменаРеквизитов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	" + ИменаРеквизитов + "
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", мсвНоменклатура);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу значений с наиболее похожей на пНаименование номенклатурой из тзНоменклатура
Функция НайтиПохожиеПоНаименованию(пНаименование, тзНоменклатура) 
	
	МассивСлов = СтрРазделить(ВРЕГ(пНаименование), " ", Ложь);
	ОбщДлинаСлов = СтрДлина(СтрЗаменить(пНаименование, " ", ""));
	
	тзСовпадения 				= Новый ТаблицаЗначений; 
	тзСовпадения.Колонки.Добавить("Номенклатура");
	тзСовпадения.Колонки.Добавить("Процент");  	
	
    Для Каждого иНом Из тзНоменклатура Цикл
		ПроцентСовпадения = ПолучитьПроцентСходстваНаименований_2(ВРЕГ(иНом.Наименование), МассивСлов, ОбщДлинаСлов);
		Для Каждого иПорог Из тзСовпадения Цикл
			Если ПроцентСовпадения > иПорог.Процент Тогда 
				нов 				= тзСовпадения.Вставить(тзСовпадения.Индекс(иПорог));
				нов.Номенклатура 	= иНом.Ссылка;
				нов.Процент 		= ПроцентСовпадения;
				Прервать;
			КонецЕсли;
		КонецЦикла;
    КонецЦикла;
	
	ПервыеСовпадения = Новый Массив;
	МаксКоличествСовпадений = МАКС(3, Цел(тзНоменклатура.Количество()/4));
	Для Каждого иСтрока Из тзСовпадения Цикл
		Счетчик = Счетчик + 1;
		ПервыеСовпадения.Добавить(иСтрока);
		Если Счетчик >= МаксКоличествСовпадений Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат тзСовпадения.Скопировать(ПервыеСовпадения);
	
КонецФункции

Функция ПолучитьПроцентСходстваНаименований_2(Знач НаимСравн="", МассивСлов, ОбщДлинаСлов)

    СуммаСовпадений = 0;
    
    Для Каждого ТекСлово Из МассивСлов Цикл
        
        Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекСлово) Тогда
            СчНачало = СтрДлина(ТекСлово);
        Иначе
            СчНачало = Макс(3, СтрДлина(ТекСлово)-4);
        КонецЕсли;
        МаксСовпадений = 0;
        
        Для Сч = СчНачало По СтрДлина(ТекСлово) Цикл
            
            ТекОтрезокЛево = Лев(ТекСлово,  Сч);
            ТекОтрезокПрав = Прав(ТекСлово, Сч);
            
            МаксСовпадений = Макс(МаксСовпадений, ?(СтрЧислоВхождений(НаимСравн, ТекОтрезокЛево)>0, Сч, 0), ?(СтрЧислоВхождений(НаимСравн, ТекОтрезокПрав)>0, Сч, 0));
        КонецЦикла;
        
        СуммаСовпадений = СуммаСовпадений + МаксСовпадений;
    КонецЦикла;
    
    ПроцентСовпадения = Окр(Мин(ОбщДлинаСлов, СуммаСовпадений) / ОбщДлинаСлов * 100, 3, 1);
    
    Возврат ПроцентСовпадения;
	
КонецФункции

Функция УбратьМусорныеСимволыИзСтроки(Знач СтрокаДанных) 
	
	МусорныеСимволы = Новый Структура("s48,s49,s50,s51,s52,s53,s54,s55,s56,s57,s97,s98,s99,s100,s101,s102,s103,s104,s105,s106,s107,s108,s109,s110,s111,s112,s113,s114,s115,s116,s117,s118,s119,s120,s121,s122,s65,s66,s67,s68,s69,s70,s71,s72,s73,s74,s75,s76,s77,s78,s79,s80,s81,s82,s83,s84,s85,s86,s87,s88,s89,s90,s1040,s1041,s1042,s1043,s1044,s1045,s1046,s1047,s1048,s1049,s1050,s1051,s1052,s1053,s1054,s1055,s1056,s1057,s1058,s1059,s1060,s1061,s1062,s1063,s1064,s1065,s1066,s1067,s1068,s1069,s1070,s1071,s1072,s1073,s1074,s1075,s1076,s1077,s1078,s1079,s1080,s1081,s1082,s1083,s1084,s1085,s1086,s1087,s1088,s1089,s1090,s1091,s1092,s1093,s1094,s1095,s1096,s1097,s1098,s1099,s1100,s1101,s1102,s1103,s10", 
	"ø", "ù", "ú", "û", "ü", "ý", "þ", "ÿ", "Ā", "ā", "ĩ", "Ī", "ī", "Ĭ", "ĭ", "Į", "į", "İ", "ı", "Ĳ", "ĳ", "Ĵ", "ĵ", "Ķ", "ķ", "ĸ", "Ĺ", "ĺ", "Ļ", "ļ", "Ľ", "ľ", "Ŀ", "ŀ", "Ł", "ł", "ĉ", "Ċ", "ċ", "Č", "č", "Ď", "ď", "Đ", "đ", "Ē", "ē", "Ĕ", "ĕ", "Ė", "ė", "Ę", "ę", "Ě", "ě", "Ĝ", "ĝ", "Ğ", "ğ", "Ġ", "ġ", "Ģ", "Ѵ", "ѵ", "Ѷ", "ѷ", "Ѹ", "ѹ", "Ѻ", "ѻ", "Ѽ", "ѽ", "Ѿ", "ѿ", "Ҁ", "ҁ", "҂", "҃", "҄", "҅", "҆", "҇", "҈", "҉", "Ҋ", "ҋ", "Ҍ", "ҍ", "Ҏ", "ҏ", "Ґ", "ґ", "Ғ", "ғ", "Ҕ", "ҕ", "Җ", "җ", "Ҙ", "ҙ", "Қ", "қ", "Ҝ", "ҝ", "Ҟ", "ҟ", "Ҡ", "ҡ", "Ң", "ң", "Ҥ", "ҥ", "Ҧ", "ҧ", "Ҩ", "ҩ", "Ҫ", "ҫ", "Ҭ", "ҭ", "Ү", "ү", "Ұ", "ұ", "Ҳ", "ҳ", "ٿ");

	Для каждого иСимвол Из МусорныеСимволы Цикл 
		СтрокаДанных = СтрЗаменить(СтрокаДанных, иСимвол.Значение, Символ(Число(СтрЗаменить(иСимвол.Ключ, "s", ""))));
	КонецЦикла;

	СтрокаДанных = СтрЗаменить(СтрокаДанных, "|", " ");
	
	Если ЛЕВ(СтрокаДанных, 1) = ":" Тогда 
		СтрокаДанных = Сред(СтрокаДанных, 2);
	КонецЕсли;

	Возврат СтрокаДанных;
	
КонецФункции

Процедура ВывестиОповещение(ОбъектыНазначения, ЗаголовокОповещения, Ошибки = Неопределено)
	
	Всего = ОбъектыНазначения.Количество();
	Ошибок = ?(Ошибки <> Неопределено, Ошибки.Количество(), 0);
	Заполнено = Всего - Ошибок;
	
	Если Всего = 1 Тогда
		Если Ошибок > 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Ошибки[0];
			Сообщение.Поле = "Объект.Номер";
			Сообщение.Сообщить();
		Иначе
			СсылкаЭлемента = ОбъектыНазначения[0];
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ЗаголовокОповещения;
			Сообщение.Сообщить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Ошибок = 0 Тогда
		ТекстОповещения = НСтр("ru = 'Обработано'")
			+ " "
			+ СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				Всего,
				НСтр("ru = 'объект,объекта,объектов'"));
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОповещения;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Кратко = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Всего объектов: %1
			|Успешно заполнено: %2
			|Ошибок: %3'"),
		Формат(Всего,     "ЧН=0; ЧГ=0"),
		Формат(Заполнено, "ЧН=0; ЧГ=0"), 
		Формат(Ошибок,    "ЧН=0; ЧГ=0"));
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Кратко;
	Сообщение.Сообщить();
	
	Подробно = "";
	Для Каждого ТекстОшибки Из Ошибки Цикл
		Подробно = Подробно + "---" + Символы.ПС + Символы.ПС + ТекстОшибки + Символы.ПС + Символы.ПС;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Обработка заполнения таможенной декларации на импорт'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.ТаможеннаяДекларацияИмпорт,
		,
		Подробно);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Архив

//// Обработчик команды.
//Процедура ЗаполнитьИНН(Форма)
//	
//	Генератор = Новый ГенераторСлучайныхЧисел;
//	
//	Форма.Объект.ИНН = Формат(Генератор.СлучайноеЧисло(1, 999999999), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
//	Форма.Модифицированность = Истина;
//	
//	Сообщение = Новый СообщениеПользователю;
//	Сообщение.Текст = НСтр("ru = 'Поле ""ИНН"" заполнено.'");
//	Сообщение.Поле = "ИНН";
//	Сообщение.Сообщить();
//	
//КонецПроцедуры

//// Обработчик команд ЗаполнитьПолноеНаименование, ДобавитьПрефиксКНаименованию, ЗаполнитьВсе и ОчиститьВсе.
//Процедура ЗаполнитьКонтрагентов(ОбъектыНазначения, ЗаполнятьНаименование, ДобавлятьПрефикс) Экспорт
//	
//	Если ОбъектыНазначения.Количество() = 0 Тогда
//		ВызватьИсключение НСтр("ru = 'Не выбраны контрагенты для заполнения'");
//	КонецЕсли;
//	
//	Ошибки = Новый Массив;
//	
//	// Заполнение объектов
//	Для Каждого ЭлементОбъектНазначения Из ОбъектыНазначения Цикл
//		ОбъектНазначения = ЭлементОбъектНазначения.ПолучитьОбъект();
//		
//		Если ЗаполнятьНаименование Тогда
//			Если Не ПустаяСтрока(ОбъектНазначения.НаименованиеПолное) Тогда
//				Ошибки.Добавить(
//					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//						НСтр("ru = 'Объект ""%1"" не обработан: реквизит ""НаименованиеПолное"" не пустой.'"),
//						Строка(ОбъектНазначения)));
//			Иначе
//				ОбъектНазначения.НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//					НСтр("ru = 'Полное наименование заполнено %1'"),
//					Строка(ТекущаяДатаСеанса()));
//			КонецЕсли;
//		КонецЕсли;
//		
//		Если ДобавлятьПрефикс Тогда
//			ОбъектНазначения.Наименование = "ПР " + ОбъектНазначения.Наименование;
//		КонецЕсли;
//		
//		ОбъектНазначения.Записать();
//	КонецЦикла;
//	
//	Если ЗаполнятьНаименование И ДобавлятьПрефикс Тогда
//		ЗаголовокОповещения = НСтр("ru = 'Наименование и префикс заполнены'");
//	ИначеЕсли ЗаполнятьНаименование Тогда
//		ЗаголовокОповещения = НСтр("ru = 'Полное наименование заполнено'");
//	ИначеЕсли ДобавлятьПрефикс Тогда
//		ЗаголовокОповещения = НСтр("ru = 'Добавлен префикс к краткому наименованию'");
//	КонецЕсли;
//	ВывестиОповещение(ОбъектыНазначения, ЗаголовокОповещения, Ошибки);
//	
//КонецПроцедуры

//// Обработчик команды ОчиститьВсе.
//Процедура ОчиститьРеквизитыКонтрагентов(ОбъектыНазначения) 
//	
//	Если ОбъектыНазначения.Количество() = 0 Тогда
//		ВызватьИсключение НСтр("ru = 'Не выбраны контрагенты для очистки реквизитов'");
//	КонецЕсли;
//	
//	// Заполнение объектов
//	Для Каждого ЭлементОбъектНазначения Из ОбъектыНазначения Цикл
//		
//		ОбъектНазначения = ЭлементОбъектНазначения.ПолучитьОбъект();
//		ОбъектНазначения.Наименование = СтрЗаменить(ОбъектНазначения.Наименование, "ПР ", "");
//		ОбъектНазначения.НаименованиеПолное = "";
//		ОбъектНазначения.ИНН = "";
//		ОбъектНазначения.Записать();
//		
//	КонецЦикла;
//	
//	ВывестиОповещение(ОбъектыНазначения, НСтр("ru = 'Наименование и префикс очищены'"));
//	
//КонецПроцедуры

#КонецОбласти

#КонецЕсли
