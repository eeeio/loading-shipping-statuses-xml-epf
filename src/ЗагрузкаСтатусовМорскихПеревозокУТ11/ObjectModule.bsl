#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Информация = НСтр("ru = 'Обработка загрузки статусов морских перевозок по файлу XML жестко заданной структуры (вер.1.0)""'");
	//ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта();
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "1.1";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	//ПараметрыРегистрации.Назначение.Добавить("Документ.ТаможеннаяДекларацияИмпорт");
	
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Заполнить реквизит ""Полное наименование"" (вызов серверной процедуры)'");
	//Команда.Идентификатор = "ЗаполнитьПолноеНаименование";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//Команда.ПоказыватьОповещение = Истина;
	
	// См. реализацию команды в процедуре ДобавитьПрефиксКНаименованию модуля формы обработки.
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Загрузить статусы морских перевозок из XML'");
	Команда.Идентификатор = "ЗагрузитьИзФайлаXML";
	Команда.Использование = "ОткрытиеФормы";
	Команда.ПоказыватьОповещение = Истина;
	
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Комплексная очистка (вызов серверной процедуры)'");
	//Команда.Идентификатор = "ОчиститьВсе";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//Команда.ПоказыватьОповещение = Ложь;
	//
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля формы обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Комплексное заполнение (вызов клиентской процедуры)'");
	//Команда.Идентификатор = "ЗаполнитьВсе";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовКлиентскогоМетода();
	//Команда.ПоказыватьОповещение = Истина;
	//
	//// См. реализацию команды в процедуре ВыполнитьКоманду модуля обработки.
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Представление = НСтр("ru = 'Заполнить реквизит ""ИНН"" не записывая объект (заполнение формы)'");
	//Команда.Идентификатор = "ЗаполнитьИНН";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыЗаполнениеФормы();
	//Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Обработчик серверных команд.
//
// Параметры:
//   ИдентификаторКоманды - Строка - Имя команды, определенное в функции СведенияОВнешнейОбработке().
//   ОбъектыНазначения    - Массив - Ссылки объектов, для которых вызвана команда.
//       - Неопределено - для команд "ЗаполнениеФормы".
//   ПараметрыВыполнения  - Структура - Контекст выполнения команды.
//       * ДополнительнаяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Ссылка обработки.
//           Может использоваться для чтения параметров обработки.
//           Пример см. в комментарии к функции ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы().
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполнения) Экспорт
	
	//ДатаЗавершенияВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах() + 4;
	
	Если ИдентификаторКоманды = "ЗагрузитьИзФайлаXML" Тогда
		ЗагрузитьИзФайлаXML(ПараметрыВыполнения);
		//Если ИдентификаторКоманды = "ЗаполнитьИНН" Тогда
		//	ЗаполнитьИНН(ПараметрыВыполнения.ЭтаФорма);
		//ИначеЕсли ИдентификаторКоманды = "ЗаполнитьПолноеНаименование" Тогда
		//	ЗаполнитьКонтрагентов(ОбъектыНазначения, Истина, Ложь);
		//ИначеЕсли ИдентификаторКоманды = "ЗаполнитьВсе" Тогда
		//	ЗаполнитьКонтрагентов(ОбъектыНазначения, Истина, Истина);
		//ИначеЕсли ИдентификаторКоманды = "ДобавитьПрефиксКНаименованию" Тогда
		//	ЗаполнитьКонтрагентов(ОбъектыНазначения, Ложь, Истина);
		//ИначеЕсли ИдентификаторКоманды = "ОчиститьВсе" Тогда
		//	ОчиститьРеквизитыКонтрагентов(ОбъектыНазначения);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Команда ""%1"" не поддерживается обработкой ""%2""'"),
		ИдентификаторКоманды,
		Метаданные().Представление());
	КонецЕсли;
	
	//// Имитация длительной операции.
	//Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < ДатаЗавершенияВМиллисекундах Цикл
	//КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБазойДанных

// Обработчик команд ЗагрузитьИзФайлаXML
Процедура ЗагрузитьИзФайлаXML(ПараметрыВыполнения) Экспорт
	
		//Если ОбъектыНазначения.Количество() = 0 Тогда
		//	ВызватьИсключение НСтр("ru = 'Не выбраны документы для заполнения'");
		//КонецЕсли;
	
	НачатьТранзакцию(); 
	Попытка 
				
		Ошибки 	= Новый Массив;
		
		ЗаголовокОповещения = ""; 	
		//ЗаголовокОповещения = НСтр("ru = 'Заполнены данные'");
		
		ДанныеXML = РазобратьXMLФабрикаXDTO(ПараметрыВыполнения.АдресХранилищаФайла);
		
		// Заполнение объектов  	
		МП_СтатусыМорскихПеревозок 		= РегистрыСведений.МП_СтатусыМорскихПеревозок.СоздатьНаборЗаписей();
		МП_ДокументыНаМорскиеПеревозки 	= РегистрыСведений.МП_ДокументыНаМорскиеПеревозки.СоздатьНаборЗаписей();
		
		Для Каждого иСтатусПеревозки Из ДанныеXML Цикл
			
			ЛЕ = ПолучитьЛогистическуюЕдиницу(иСтатусПеревозки.ЛогистическаяЕдиница);
			
			Если ТипЗнч(ЛЕ) = Тип("Строка") Тогда 
				Ошибки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Строка ""%1"" файла не обработана: не найдена логистическая единица.'"),
				иСтатусПеревозки.НомерСтроки));
				//Сообщение 				= Новый СообщениеПользователю;
				//Сообщение.Текст 		= ЛЕ;
				//Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			
			МП_СтатусыМорскихПеревозок.Отбор.ЛогистическаяЕдиница.Установить(ЛЕ);					
			МП_СтатусыМорскихПеревозок.Прочитать();
			Если МП_СтатусыМорскихПеревозок.Количество() = 0 Тогда 
				СтрокаРег = МП_СтатусыМорскихПеревозок.Добавить();
				СтрокаРег.ЛогистическаяЕдиница = ЛЕ;
			Иначе
				СтрокаРег = МП_СтатусыМорскихПеревозок[0];
			КонецЕсли;     	
			ЕстьИзмененияВСтатусах = Ложь;
			Для Каждого иЭлемент Из иСтатусПеревозки.СтатусыМорскихПеревозок Цикл
				Если СтрокаРег[иЭлемент.Ключ] <> иЭлемент.Значение Тогда 
					ЕстьИзмененияВСтатусах = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьИзмененияВСтатусах Тогда 
				ЗаполнитьЗначенияСвойств(СтрокаРег, иСтатусПеревозки.СтатусыМорскихПеревозок);
				СтрокаРег.Статус = СформироватьСтатус(иСтатусПеревозки.СтатусыМорскихПеревозок);
				СтрокаРег.ДатаИзменения = ТекущаяДата();
				МП_СтатусыМорскихПеревозок.Записать();
			КонецЕсли;
			
			ЕстьЗаполненныеДокументы = Ложь;
			Для Каждого иЭлемент Из иСтатусПеревозки.ДокументыНаМорскиеПеревозки Цикл
				Если ЗначениеЗаполнено(иЭлемент.Значение) Тогда 
					ЕстьЗаполненныеДокументы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьЗаполненныеДокументы Тогда 
				МП_ДокументыНаМорскиеПеревозки.Отбор.ЛогистическаяЕдиница.Установить(ЛЕ);					
				МП_ДокументыНаМорскиеПеревозки.Прочитать();
				Если МП_ДокументыНаМорскиеПеревозки.Количество() = 0 Тогда 
					СтрокаРег = МП_ДокументыНаМорскиеПеревозки.Добавить();
					СтрокаРег.ЛогистическаяЕдиница = ЛЕ;
				Иначе
					СтрокаРег = МП_ДокументыНаМорскиеПеревозки[0];
				КонецЕсли;     	
				ЕстьИзмененияВДокументах = Ложь;
				Для Каждого иЭлемент Из иСтатусПеревозки.ДокументыНаМорскиеПеревозки Цикл
					Если СтрокаРег[иЭлемент.Ключ] <> иЭлемент.Значение Тогда 
						ЕстьИзмененияВДокументах = Истина;  
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьИзмененияВДокументах Тогда 
					ЗаполнитьЗначенияСвойств(СтрокаРег, иСтатусПеревозки.ДокументыНаМорскиеПеревозки);
					СтрокаРег.ДатаИзменения = ТекущаяДата();
					МП_ДокументыНаМорскиеПеревозки.Записать();
				КонецЕсли;
			КонецЕсли;  				
		КонецЦикла;  		
		
		ЗафиксироватьТранзакцию();
	Исключение     
		Если ТранзакцияАктивна() Тогда         
			ОтменитьТранзакцию();     
		КонецЕсли;     
		ВызватьИсключение; 
	КонецПопытки;
	
	ВывестиОповещение(ДанныеXML, ЗаголовокОповещения, Ошибки);
	
КонецПроцедуры

Функция ПолучитьЛогистическуюЕдиницу(ДанныеИзФайла)
	
	ЕстьИзменения = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МП_ЛогистическиеЕдиницы.Ссылка КАК Ссылка,
	|	МП_ЛогистическиеЕдиницы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.МП_ЛогистическиеЕдиницы КАК МП_ЛогистическиеЕдиницы
	|ГДЕ
	|	НЕ МП_ЛогистическиеЕдиницы.ПометкаУдаления
	|	И МП_ЛогистическиеЕдиницы.НомерПеревозки = &НомерПеревозки";
	
	Запрос.УстановитьПараметр("НомерПеревозки", 	ДанныеИзФайла.НомерПеревозки);
	//Запрос.УстановитьПараметр("Наименование", 	ДанныеИзФайла.Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбъектЛЕ = Неопределено;
	Если РезультатЗапроса.Пустой() Тогда 
		ОбъектЛЕ = Справочники.МП_ЛогистическиеЕдиницы.СоздатьЭлемент();
		ЕстьИзменения = Истина;
	Иначе  	
		Выборка = РезультатЗапроса.Выбрать(); 		
		Пока Выборка.Следующий() Цикл
			Если СокрЛП(Выборка.Наименование) = СокрЛП(ДанныеИзФайла.Наименование) Тогда 
				ОбъектЛЕ = Выборка.Ссылка.ПолучитьОбъект(); 			
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ОбъектЛЕ = Неопределено Тогда 
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(Выборка.Наименование) Тогда 
					ОбъектЛЕ = Выборка.Ссылка.ПолучитьОбъект(); 			
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ОбъектЛЕ = Неопределено Тогда 
			ОбъектЛЕ = Справочники.МП_ЛогистическиеЕдиницы.СоздатьЭлемент();
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЕстьИзменения Тогда 
		Для Каждого иЭлемент Из ДанныеИзФайла Цикл
			Если ОбъектЛЕ[иЭлемент.Ключ] <> иЭлемент.Значение Тогда 
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда 
		Попытка
			ОбъектЛЕ.Заблокировать();
		Исключение
			Возврат "Не удалось заблокировать объект " + ОбъектЛЕ;
		КонецПопытки;
		ЗаполнитьЗначенияСвойств(ОбъектЛЕ, ДанныеИзФайла);
		ОбъектЛЕ.ТипТранспорта = ОпределитьТипТранспорта(ДанныеИзФайла.ТипТранспорта);
		//ОбъектЛЕ.УстановитьНовыйКод();
		ОбъектЛЕ.ОбменДанными.Загрузка = Истина;
		ОбъектЛЕ.Записать();
	КонецЕсли;
		
	Возврат ОбъектЛЕ.Ссылка;
	
КонецФункции

Функция ОпределитьТипТранспорта(ТипТранспортаСтрока)
	
	Если НЕ ЗначениеЗаполнено(ТипТранспортаСтрока) Тогда 
		Возврат Справочники.МП_ТипТранспорта.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МП_ТипТранспорта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МП_ТипТранспорта КАК МП_ТипТранспорта
	|ГДЕ
	|	НЕ МП_ТипТранспорта.ПометкаУдаления
	|	И МП_ТипТранспорта.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", 	ТипТранспортаСтрока);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		ОбъектТипТранспорта = Справочники.МП_ТипТранспорта.СоздатьЭлемент();
		ОбъектТипТранспорта.Наименование = ТипТранспортаСтрока;
		//ОбъектТипТранспорта.УстановитьНовыйКод();
		ОбъектТипТранспорта.ОбменДанными.Загрузка = Истина;
		ОбъектТипТранспорта.Записать();
		Возврат ОбъектТипТранспорта.Ссылка;
	Иначе  	
		Выборка = РезультатЗапроса.Выбрать(); 		
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
		
КонецФункции

Функция СформироватьСтатус(СтрокаСтатуса)
	
	Если ЗначениеЗаполнено(СтрокаСтатуса.ДатаПрибытияФакт) Тогда
		Возврат Перечисления.МП_СтатусыМорскихПеревозок.ГрузПрибылВПортНазначения;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаСтатуса.ДатаВыходаФидерныйПортФакт) Тогда
		Возврат Перечисления.МП_СтатусыМорскихПеревозок.ГрузВышелИзФидерногоПорта;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаСтатуса.ДатаПрибытияФидерныйПортФакт) Тогда
		Возврат Перечисления.МП_СтатусыМорскихПеревозок.ГрузПрибылВФидерныйПорт;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаСтатуса.ДатаВыходаФакт) Тогда
		Возврат Перечисления.МП_СтатусыМорскихПеревозок.ГрузВышел;
		
	ИначеЕсли ВРЕГ(СтрокаСтатуса.Состояние) = "ЗАГРУЗКА" Тогда
		Возврат Перечисления.МП_СтатусыМорскихПеревозок.Загружается;
		
	Иначе
		Возврат Перечисления.МП_СтатусыМорскихПеревозок.Запланирована;
	КонецЕсли;
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазобратьXMLФабрикаXDTO(АдресХранилищаФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЧтениеXML = Новый ЧтениеXML;
	ФайлXML = ПолучитьИзВременногоХранилища(АдресХранилищаФайла);	
	
	Поток = ФайлXML.ОткрытьПотокДляЧтения();	
	ЧтениеXML.ОткрытьПоток(Поток); 	
	
	// Использование фабрики XDTO без привлечения XDTO пакетов 	
	ГТД_XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	// предполагаем, что файл имеет жесткую структуру 
	ИспользуемыеПоля = ПолучитьИменаИспользуемыхПолей();
	
	РезультатРазборки = Новый Массив;	
		
	СтрокиСтатусов = ГТД_XDTO.ROW;
	Если ТипЗнч(СтрокиСтатусов) <> Тип("СписокXDTO") Тогда 
		СписокСтатусов = Новый Массив;
		СписокСтатусов.Добавить(СтрокиСтатусов);
	Иначе
		СписокСтатусов = СтрокиСтатусов;
	КонецЕсли;
	Для Каждого иСтрокаСтатуса Из СписокСтатусов Цикл
		
		// иногда не все нужные нам свойства есть в строке
		СписокПолей = иСтрокаСтатуса.Свойства(); 		
		СуществующиеПоля = Новый Массив;
		Для Каждого иПоле Из СписокПолей Цикл
			СуществующиеПоля.Добавить(иПоле.Имя);
		КонецЦикла;
		ЗначенияПоСтрокеСтатуса = ПолучитьЗначенияИспользуемыхПолей(иСтрокаСтатуса, ИспользуемыеПоля, СуществующиеПоля);
		
		НомерСтрокиФайла = Число(Строка(ЗначенияПоСтрокеСтатуса.ID));
		
		Если НомерСтрокиФайла = 0 Тогда 
			// это строка заголовка
			НачалоПериодаЗагрузки 		= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.START_DATE_S);
			ОкончаниеПериодаЗагрузки 	= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.END_DATE_S);
		Иначе
			// это строка статуса
			
			Наименование 	= УбратьМусорныеСимволыИзСтроки(ЗначенияПоСтрокеСтатуса.TRANSPORT_NO);
			мсвНомераКонтейнеров = СтрРазделить(Наименование, ";", Ложь);
			Если мсвНомераКонтейнеров.Количество() = 0 Тогда 
				мсвНомераКонтейнеров.Добавить("");
			КонецЕсли;
			
			Для Каждого иЭлемент Из мсвНомераКонтейнеров Цикл 
				
				ЛогистическаяЕдиница = Новый Структура(
				"Наименование, НомерПеревозки, НомерКоносамента, ТипТранспорта, Объем, Брутто, 
				|КоличествоГрузомест, ОкеанскаяЛиния, ПортПогрузки, УсловиеПоставки, Отправитель, НомерПроформы, НаименованиеГруза,
				|АдресДоставки, СтавкаФрахта, ВвознаяПошлина, НДС, Сборы, СпецПошлина,
				|НесколькоКонтейнеровВПеревозке");
				СтатусыМорскихПеревозок = Новый Структура(
				"Состояние, ДатаВыходаПлан, ДатаВыходаФакт,
				|ДатаПрибытияФидерныйПортПлан, ДатаПрибытияФидерныйПортФакт,
				|ДатаВыходаФидерныйПортПлан, ДатаВыходаФидерныйПортФакт,
				|ДатаПрибытияПлан, ДатаПрибытияФакт");
				ДокументыНаМорскиеПеревозки = Новый Структура(
				"НомерСчетаФактуры_ТЭО, ДатаСчетаФактуры_ТЭО, Сумма_ТЭО,
				|НомерСчетаФактуры_Автоперевозка, ДатаСчетаФактуры_Автоперевозка, Сумма_Автоперевозка,
				|НомерСчетаФактуры_Организация, ДатаСчетаФактуры_Организация, Сумма_Организация,
				|НомерАкта_ТаможОформление, ДатаАкта_ТаможОформление, Сумма_ТаможОформление,
				|НомерАкта_ВозмещениеПеревод, ДатаАкта_ВозмещениеПеревод, Сумма_ВозмещениеПеревод, 
				|НомерАкта_ВозмещениеПлатежи, ДатаАкта_ВозмещениеПлатежи, Сумма_ВозмещениеПлатежи,
				|НомерАкта_ВозмещениеСВХ, ДатаАкта_ВозмещениеСВХ, Сумма_ВозмещениеСВХ, Сумма_ДопСчет");
				
				ЛогистическаяЕдиница.Наименование 		= иЭлемент;
				ЛогистическаяЕдиница.НомерПеревозки 	= УбратьМусорныеСимволыИзСтроки(ЗначенияПоСтрокеСтатуса.DELIVERY_NUM);
				ЛогистическаяЕдиница.НомерКоносамента 	= УбратьМусорныеСимволыИзСтроки(ЗначенияПоСтрокеСтатуса.BIL_OF_LADING);
				ЛогистическаяЕдиница.ТипТранспорта 		= УбратьМусорныеСимволыИзСтроки(ЗначенияПоСтрокеСтатуса.TRANSPORT_SUB_TYPE);
				ЛогистическаяЕдиница.Объем 				= Число(ЗначенияПоСтрокеСтатуса.VOLUME);
				ЛогистическаяЕдиница.Брутто 			= Число(ЗначенияПоСтрокеСтатуса.BRUTTO);
				ЛогистическаяЕдиница.КоличествоГрузомест = ЗначенияПоСтрокеСтатуса.PACKS;
				ЛогистическаяЕдиница.ОкеанскаяЛиния 	= УбратьМусорныеСимволыИзСтроки(ЗначенияПоСтрокеСтатуса.CONTRAGENT_3_NAME);
				ЛогистическаяЕдиница.ПортПогрузки 		= УбратьМусорныеСимволыИзСтроки(ЗначенияПоСтрокеСтатуса.PORT_IN);
				ЛогистическаяЕдиница.УсловиеПоставки 	= УбратьМусорныеСимволыИзСтроки(ЗначенияПоСтрокеСтатуса.SUPPLY_CONDS);
				ЛогистическаяЕдиница.Отправитель 		= УбратьМусорныеСимволыИзСтроки(ЗначенияПоСтрокеСтатуса.S_ADDRESS);
				ЛогистическаяЕдиница.НомерПроформы 		= УбратьМусорныеСимволыИзСтроки(ЗначенияПоСтрокеСтатуса.S_CONSIGNOR_ORDER);
				ЛогистическаяЕдиница.НаименованиеГруза 	= УбратьМусорныеСимволыИзСтроки(ЗначенияПоСтрокеСтатуса.CARGO_NAME);
				ЛогистическаяЕдиница.АдресДоставки 		= УбратьМусорныеСимволыИзСтроки(ЗначенияПоСтрокеСтатуса.DESTINATION_ADDRESS);
				ЛогистическаяЕдиница.СтавкаФрахта 		= Число(ЗначенияПоСтрокеСтатуса.DECLARED_COST);
				ЛогистическаяЕдиница.ВвознаяПошлина 	= Число(ЗначенияПоСтрокеСтатуса.TOTAL_DUTY_220);
				ЛогистическаяЕдиница.НДС 				= Число(ЗначенияПоСтрокеСтатуса.TOTAL_NDS);
				ЛогистическаяЕдиница.Сборы 				= Число(ЗначенияПоСтрокеСтатуса.TOTAL_DUES_AND_FEES);
				ЛогистическаяЕдиница.СпецПошлина 		= Число(ЗначенияПоСтрокеСтатуса.TOTAL_DUTY_240);
				
				ЛогистическаяЕдиница.НесколькоКонтейнеровВПеревозке = (мсвНомераКонтейнеров.Количество() > 1);
			
				СтатусыМорскихПеревозок.Состояние 						= УбратьМусорныеСимволыИзСтроки(ЗначенияПоСтрокеСтатуса.STATUS);
				СтатусыМорскихПеревозок.ДатаВыходаПлан 					= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.SHIPMENT_DATE_P);
				СтатусыМорскихПеревозок.ДатаВыходаФакт 					= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.SHIPMENT_DATE_A);
				СтатусыМорскихПеревозок.ДатаПрибытияФидерныйПортПлан 	= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.DATE_CP_P);
				СтатусыМорскихПеревозок.ДатаПрибытияФидерныйПортФакт 	= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.DATE_CP_A);
				СтатусыМорскихПеревозок.ДатаВыходаФидерныйПортПлан 		= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.DATE_TP_P);
				СтатусыМорскихПеревозок.ДатаВыходаФидерныйПортФакт 		= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.DATE_TP_A);
				СтатусыМорскихПеревозок.ДатаПрибытияПлан 				= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.IN_DATE_P);
				СтатусыМорскихПеревозок.ДатаПрибытияФакт 				= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.IN_DATE_A);
				
				ДокументыНаМорскиеПеревозки.НомерСчетаФактуры_ТЭО 			= ЗначенияПоСтрокеСтатуса.SERVICE_1_NUM;
				ДокументыНаМорскиеПеревозки.ДатаСчетаФактуры_ТЭО 			= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.SERVICE_1_DATE);
				ДокументыНаМорскиеПеревозки.Сумма_ТЭО 						= Число(ЗначенияПоСтрокеСтатуса.SERVICE_1_COST);
				ДокументыНаМорскиеПеревозки.НомерСчетаФактуры_Автоперевозка = ЗначенияПоСтрокеСтатуса.SERVICE_2_NUM;
				ДокументыНаМорскиеПеревозки.ДатаСчетаФактуры_Автоперевозка 	= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.SERVICE_2_DATE);
				ДокументыНаМорскиеПеревозки.Сумма_Автоперевозка 			= Число(ЗначенияПоСтрокеСтатуса.SERVICE_2_COST);
				ДокументыНаМорскиеПеревозки.НомерСчетаФактуры_Организация 	= ЗначенияПоСтрокеСтатуса.SERVICE_3_NUM;
				ДокументыНаМорскиеПеревозки.ДатаСчетаФактуры_Организация 	= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.SERVICE_3_DATE);
				ДокументыНаМорскиеПеревозки.Сумма_Организация 				= Число(ЗначенияПоСтрокеСтатуса.SERVICE_3_COST);
				ДокументыНаМорскиеПеревозки.НомерАкта_ТаможОформление 		= ЗначенияПоСтрокеСтатуса.SERVICE_4_NUM;
				ДокументыНаМорскиеПеревозки.ДатаАкта_ТаможОформление 		= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.SERVICE_4_DATE);
				ДокументыНаМорскиеПеревозки.Сумма_ТаможОформление 			= Число(ЗначенияПоСтрокеСтатуса.SERVICE_4_COST);
				ДокументыНаМорскиеПеревозки.НомерАкта_ВозмещениеПеревод 	= ЗначенияПоСтрокеСтатуса.SERVICE_5_NUM;
				ДокументыНаМорскиеПеревозки.ДатаАкта_ВозмещениеПеревод 		= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.SERVICE_5_DATE);
				ДокументыНаМорскиеПеревозки.Сумма_ВозмещениеПеревод 		= Число(ЗначенияПоСтрокеСтатуса.SERVICE_5_COST);
				ДокументыНаМорскиеПеревозки.НомерАкта_ВозмещениеПлатежи 	= ЗначенияПоСтрокеСтатуса.SERVICE_6_NUM;
				ДокументыНаМорскиеПеревозки.ДатаАкта_ВозмещениеПлатежи 		= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.SERVICE_6_DATE);
				ДокументыНаМорскиеПеревозки.Сумма_ВозмещениеПлатежи 		= Число(ЗначенияПоСтрокеСтатуса.SERVICE_6_COST);
				ДокументыНаМорскиеПеревозки.НомерАкта_ВозмещениеСВХ 		= ЗначенияПоСтрокеСтатуса.SERVICE_7_NUM;
				ДокументыНаМорскиеПеревозки.ДатаАкта_ВозмещениеСВХ 			= ПреобразоватьВДату(ЗначенияПоСтрокеСтатуса.SERVICE_7_DATE);
				ДокументыНаМорскиеПеревозки.Сумма_ВозмещениеСВХ 			= Число(ЗначенияПоСтрокеСтатуса.SERVICE_7_COST);
				ДокументыНаМорскиеПеревозки.Сумма_ДопСчет 					= Число(ЗначенияПоСтрокеСтатуса.SERVICE_8_COST);
			
				РезультатРазборки.Добавить(Новый Структура(
					"НомерСтроки, ЛогистическаяЕдиница, СтатусыМорскихПеревозок, ДокументыНаМорскиеПеревозки", 
					НомерСтрокиФайла, ЛогистическаяЕдиница, СтатусыМорскихПеревозок, ДокументыНаМорскиеПеревозки));
					
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатРазборки;
	
КонецФункции

Функция ПолучитьИменаИспользуемыхПолей()
	
	ИспользуемыеПоля = Новый Массив;
	
	ИспользуемыеПоля.Добавить("ID");
	ИспользуемыеПоля.Добавить("START_DATE_S");
	ИспользуемыеПоля.Добавить("END_DATE_S");
	ИспользуемыеПоля.Добавить("BIL_OF_LADING");
	ИспользуемыеПоля.Добавить("DELIVERY_NUM");
	ИспользуемыеПоля.Добавить("TRANSPORT_NO");
	ИспользуемыеПоля.Добавить("TRANSPORT_SUB_TYPE");
	ИспользуемыеПоля.Добавить("VOLUME");
	ИспользуемыеПоля.Добавить("BRUTTO");
	ИспользуемыеПоля.Добавить("PACKS");
	ИспользуемыеПоля.Добавить("CONTRAGENT_3_NAME");
	ИспользуемыеПоля.Добавить("PORT_IN");
	ИспользуемыеПоля.Добавить("SUPPLY_CONDS");
	ИспользуемыеПоля.Добавить("S_ADDRESS");
	ИспользуемыеПоля.Добавить("S_CONSIGNOR_ORDER");
	ИспользуемыеПоля.Добавить("CARGO_NAME");
	ИспользуемыеПоля.Добавить("DESTINATION_ADDRESS");
	ИспользуемыеПоля.Добавить("DECLARED_COST");
	ИспользуемыеПоля.Добавить("TOTAL_DUTY_220");
	ИспользуемыеПоля.Добавить("TOTAL_NDS");
	ИспользуемыеПоля.Добавить("TOTAL_DUES_AND_FEES");
	ИспользуемыеПоля.Добавить("TOTAL_DUTY_240");
	
	ИспользуемыеПоля.Добавить("STATUS");
	ИспользуемыеПоля.Добавить("SHIPMENT_DATE_P");
	ИспользуемыеПоля.Добавить("SHIPMENT_DATE_A");
	ИспользуемыеПоля.Добавить("DATE_CP_P");
	ИспользуемыеПоля.Добавить("DATE_CP_A");
	ИспользуемыеПоля.Добавить("DATE_TP_P");
	ИспользуемыеПоля.Добавить("DATE_TP_A");
	ИспользуемыеПоля.Добавить("IN_DATE_P");
	ИспользуемыеПоля.Добавить("IN_DATE_A");
		
	ИспользуемыеПоля.Добавить("SERVICE_1_NUM");
	ИспользуемыеПоля.Добавить("SERVICE_1_DATE");
	ИспользуемыеПоля.Добавить("SERVICE_1_COST");
	ИспользуемыеПоля.Добавить("SERVICE_2_NUM");
	ИспользуемыеПоля.Добавить("SERVICE_2_DATE");
	ИспользуемыеПоля.Добавить("SERVICE_2_COST");
	ИспользуемыеПоля.Добавить("SERVICE_3_NUM");
	ИспользуемыеПоля.Добавить("SERVICE_3_DATE");
	ИспользуемыеПоля.Добавить("SERVICE_3_COST");
	ИспользуемыеПоля.Добавить("SERVICE_4_NUM");
	ИспользуемыеПоля.Добавить("SERVICE_4_DATE");
	ИспользуемыеПоля.Добавить("SERVICE_4_COST");
	ИспользуемыеПоля.Добавить("SERVICE_5_NUM");
	ИспользуемыеПоля.Добавить("SERVICE_5_DATE");
	ИспользуемыеПоля.Добавить("SERVICE_5_COST");
	ИспользуемыеПоля.Добавить("SERVICE_6_NUM");
	ИспользуемыеПоля.Добавить("SERVICE_6_DATE");
	ИспользуемыеПоля.Добавить("SERVICE_6_COST");
	ИспользуемыеПоля.Добавить("SERVICE_7_NUM");
	ИспользуемыеПоля.Добавить("SERVICE_7_DATE");
	ИспользуемыеПоля.Добавить("SERVICE_7_COST");
	ИспользуемыеПоля.Добавить("SERVICE_8_COST");
	
	Возврат ИспользуемыеПоля;
	
КонецФункции

Функция ПолучитьЗначенияИспользуемыхПолей(СтрокаXML, ИспользуемыеПоля, СуществующиеПоля)
	
	ЗначенияИспользуемыхПолей = Новый Структура;
	
	Для Каждого иИмяПоля Из ИспользуемыеПоля Цикл   		
		Если СуществующиеПоля.Найти(иИмяПоля) = Неопределено Тогда 
			ЗначенияИспользуемыхПолей.Вставить(иИмяПоля, "");
		Иначе
			ЗначенияИспользуемыхПолей.Вставить(иИмяПоля, СтрокаXML[иИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияИспользуемыхПолей;
	
КонецФункции

Функция ПреобразоватьВДату(ДатаСтрокой)
	
	Если НЕ ЗначениеЗаполнено(ДатаСтрокой) Тогда 
		Возврат Дата(1,1,1);
	Иначе
		ФорматСтрокиДаты = ЗаменитьЦифрыНаX(ДатаСтрокой);
		Если ФорматСтрокиДаты = "ХХ.ХХ.ХХХХ" Тогда 
			Возврат Дата(Число(Прав(ДатаСтрокой,4)), Число(Прав(Лев(ДатаСтрокой, 5), 2)), Число(Лев(ДатаСтрокой,2)));
		ИначеЕсли ФорматСтрокиДаты = "ХХ.ХХ.ХХ" Тогда
			Возврат Дата(Число("20"+Прав(ДатаСтрокой,2)), Число(Прав(Лев(ДатаСтрокой, 5), 2)), Число(Лев(ДатаСтрокой,2)));
		ИначеЕсли ФорматСтрокиДаты = "ХХХХХХХХ" Тогда 
			Возврат Дата(ДатаСтрокой);
		Иначе
			Возврат Дата(ДатаСтрокой);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция УбратьМусорныеСимволыИзСтроки(Знач СтрокаДанных) 
	
	МусорныеСимволы = Новый Структура("s48,s49,s50,s51,s52,s53,s54,s55,s56,s57,s97,s98,s99,s100,s101,s102,s103,s104,s105,s106,s107,s108,s109,s110,s111,s112,s113,s114,s115,s116,s117,s118,s119,s120,s121,s122,s65,s66,s67,s68,s69,s70,s71,s72,s73,s74,s75,s76,s77,s78,s79,s80,s81,s82,s83,s84,s85,s86,s87,s88,s89,s90,s1040,s1041,s1042,s1043,s1044,s1045,s1046,s1047,s1048,s1049,s1050,s1051,s1052,s1053,s1054,s1055,s1056,s1057,s1058,s1059,s1060,s1061,s1062,s1063,s1064,s1065,s1066,s1067,s1068,s1069,s1070,s1071,s1072,s1073,s1074,s1075,s1076,s1077,s1078,s1079,s1080,s1081,s1082,s1083,s1084,s1085,s1086,s1087,s1088,s1089,s1090,s1091,s1092,s1093,s1094,s1095,s1096,s1097,s1098,s1099,s1100,s1101,s1102,s1103,s10", 
	"ø", "ù", "ú", "û", "ü", "ý", "þ", "ÿ", "Ā", "ā", "ĩ", "Ī", "ī", "Ĭ", "ĭ", "Į", "į", "İ", "ı", "Ĳ", "ĳ", "Ĵ", "ĵ", "Ķ", "ķ", "ĸ", "Ĺ", "ĺ", "Ļ", "ļ", "Ľ", "ľ", "Ŀ", "ŀ", "Ł", "ł", "ĉ", "Ċ", "ċ", "Č", "č", "Ď", "ď", "Đ", "đ", "Ē", "ē", "Ĕ", "ĕ", "Ė", "ė", "Ę", "ę", "Ě", "ě", "Ĝ", "ĝ", "Ğ", "ğ", "Ġ", "ġ", "Ģ", "Ѵ", "ѵ", "Ѷ", "ѷ", "Ѹ", "ѹ", "Ѻ", "ѻ", "Ѽ", "ѽ", "Ѿ", "ѿ", "Ҁ", "ҁ", "҂", "҃", "҄", "҅", "҆", "҇", "҈", "҉", "Ҋ", "ҋ", "Ҍ", "ҍ", "Ҏ", "ҏ", "Ґ", "ґ", "Ғ", "ғ", "Ҕ", "ҕ", "Җ", "җ", "Ҙ", "ҙ", "Қ", "қ", "Ҝ", "ҝ", "Ҟ", "ҟ", "Ҡ", "ҡ", "Ң", "ң", "Ҥ", "ҥ", "Ҧ", "ҧ", "Ҩ", "ҩ", "Ҫ", "ҫ", "Ҭ", "ҭ", "Ү", "ү", "Ұ", "ұ", "Ҳ", "ҳ", "ٿ");

	Для каждого иСимвол Из МусорныеСимволы Цикл 
		СтрокаДанных = СтрЗаменить(СтрокаДанных, иСимвол.Значение, Символ(Число(СтрЗаменить(иСимвол.Ключ, "s", ""))));
	КонецЦикла;

	СтрокаДанных = СтрЗаменить(СтрокаДанных, "|", " ");
	
	Если ЛЕВ(СтрокаДанных, 1) = ":" Тогда 
		СтрокаДанных = Сред(СтрокаДанных, 2);
	КонецЕсли;

	Возврат СтрокаДанных;
	
КонецФункции

Функция ЗаменитьЦифрыНаX(Знач СтрокаДанных) 
	
	МусорныеСимволы = Новый Массив;
	МусорныеСимволы.Добавить("0");
	МусорныеСимволы.Добавить("1");
	МусорныеСимволы.Добавить("2");
	МусорныеСимволы.Добавить("3");
	МусорныеСимволы.Добавить("4");
	МусорныеСимволы.Добавить("5");
	МусорныеСимволы.Добавить("6");
	МусорныеСимволы.Добавить("7");
	МусорныеСимволы.Добавить("8");
	МусорныеСимволы.Добавить("9");

	Для каждого иСимвол Из МусорныеСимволы Цикл 
		СтрокаДанных = СтрЗаменить(СтрокаДанных, иСимвол, "Х");
	КонецЦикла;

	СтрокаДанных = СтрЗаменить(СтрокаДанных, "|", "");
	СтрокаДанных = СтрЗаменить(СтрокаДанных, "/", ".");
	СтрокаДанных = СтрЗаменить(СтрокаДанных, ",", ".");
	СтрокаДанных = СтрЗаменить(СтрокаДанных, "-", ".");
	СтрокаДанных = СтрЗаменить(СтрокаДанных, "_", ".");
	СтрокаДанных = СтрЗаменить(СтрокаДанных, " ", ".");
	
	Если ЛЕВ(СтрокаДанных, 1) = ":" Тогда 
		СтрокаДанных = Сред(СтрокаДанных, 2);
	КонецЕсли;

	Возврат СтрокаДанных;
	
КонецФункции

Процедура ВывестиОповещение(ОбъектыНазначения, ЗаголовокОповещения, Ошибки = Неопределено)
	
	Всего = ОбъектыНазначения.Количество();
	Ошибок = ?(Ошибки <> Неопределено, Ошибки.Количество(), 0);
	Заполнено = Всего - Ошибок;
	
	Если Всего = 1 Тогда
		Если Ошибок > 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Ошибки[0];
			Сообщение.Поле = "Объект.Номер";
			Сообщение.Сообщить();
		Иначе
			СсылкаЭлемента = ОбъектыНазначения[0];
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ЗаголовокОповещения;
			Сообщение.Сообщить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Ошибок = 0 Тогда
		ТекстОповещения = НСтр("ru = 'Обработано'")
			+ " "
			+ СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				Всего,
				НСтр("ru = 'объект,объекта,объектов'"));
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОповещения;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Кратко = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Всего объектов: %1
			|Успешно заполнено: %2
			|Ошибок: %3'"),
		Формат(Всего,     "ЧН=0; ЧГ=0"),
		Формат(Заполнено, "ЧН=0; ЧГ=0"), 
		Формат(Ошибок,    "ЧН=0; ЧГ=0"));
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Кратко;
	Сообщение.Сообщить();
	
	Подробно = "";
	Для Каждого ТекстОшибки Из Ошибки Цикл
		Подробно = Подробно + "---" + Символы.ПС + Символы.ПС + ТекстОшибки + Символы.ПС + Символы.ПС;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Обработка заполнения таможенной декларации на импорт'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.ТаможеннаяДекларацияИмпорт,
		,
		Подробно);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Архив

//// Обработчик команды.
//Процедура ЗаполнитьИНН(Форма)
//	
//	Генератор = Новый ГенераторСлучайныхЧисел;
//	
//	Форма.Объект.ИНН = Формат(Генератор.СлучайноеЧисло(1, 999999999), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
//	Форма.Модифицированность = Истина;
//	
//	Сообщение = Новый СообщениеПользователю;
//	Сообщение.Текст = НСтр("ru = 'Поле ""ИНН"" заполнено.'");
//	Сообщение.Поле = "ИНН";
//	Сообщение.Сообщить();
//	
//КонецПроцедуры

//// Обработчик команд ЗаполнитьПолноеНаименование, ДобавитьПрефиксКНаименованию, ЗаполнитьВсе и ОчиститьВсе.
//Процедура ЗаполнитьКонтрагентов(ОбъектыНазначения, ЗаполнятьНаименование, ДобавлятьПрефикс) Экспорт
//	
//	Если ОбъектыНазначения.Количество() = 0 Тогда
//		ВызватьИсключение НСтр("ru = 'Не выбраны контрагенты для заполнения'");
//	КонецЕсли;
//	
//	Ошибки = Новый Массив;
//	
//	// Заполнение объектов
//	Для Каждого ЭлементОбъектНазначения Из ОбъектыНазначения Цикл
//		ОбъектНазначения = ЭлементОбъектНазначения.ПолучитьОбъект();
//		
//		Если ЗаполнятьНаименование Тогда
//			Если Не ПустаяСтрока(ОбъектНазначения.НаименованиеПолное) Тогда
//				Ошибки.Добавить(
//					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//						НСтр("ru = 'Объект ""%1"" не обработан: реквизит ""НаименованиеПолное"" не пустой.'"),
//						Строка(ОбъектНазначения)));
//			Иначе
//				ОбъектНазначения.НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//					НСтр("ru = 'Полное наименование заполнено %1'"),
//					Строка(ТекущаяДатаСеанса()));
//			КонецЕсли;
//		КонецЕсли;
//		
//		Если ДобавлятьПрефикс Тогда
//			ОбъектНазначения.Наименование = "ПР " + ОбъектНазначения.Наименование;
//		КонецЕсли;
//		
//		ОбъектНазначения.Записать();
//	КонецЦикла;
//	
//	Если ЗаполнятьНаименование И ДобавлятьПрефикс Тогда
//		ЗаголовокОповещения = НСтр("ru = 'Наименование и префикс заполнены'");
//	ИначеЕсли ЗаполнятьНаименование Тогда
//		ЗаголовокОповещения = НСтр("ru = 'Полное наименование заполнено'");
//	ИначеЕсли ДобавлятьПрефикс Тогда
//		ЗаголовокОповещения = НСтр("ru = 'Добавлен префикс к краткому наименованию'");
//	КонецЕсли;
//	ВывестиОповещение(ОбъектыНазначения, ЗаголовокОповещения, Ошибки);
//	
//КонецПроцедуры

//// Обработчик команды ОчиститьВсе.
//Процедура ОчиститьРеквизитыКонтрагентов(ОбъектыНазначения) 
//	
//	Если ОбъектыНазначения.Количество() = 0 Тогда
//		ВызватьИсключение НСтр("ru = 'Не выбраны контрагенты для очистки реквизитов'");
//	КонецЕсли;
//	
//	// Заполнение объектов
//	Для Каждого ЭлементОбъектНазначения Из ОбъектыНазначения Цикл
//		
//		ОбъектНазначения = ЭлементОбъектНазначения.ПолучитьОбъект();
//		ОбъектНазначения.Наименование = СтрЗаменить(ОбъектНазначения.Наименование, "ПР ", "");
//		ОбъектНазначения.НаименованиеПолное = "";
//		ОбъектНазначения.ИНН = "";
//		ОбъектНазначения.Записать();
//		
//	КонецЦикла;
//	
//	ВывестиОповещение(ОбъектыНазначения, НСтр("ru = 'Наименование и префикс очищены'"));
//	
//КонецПроцедуры

#КонецОбласти

#КонецЕсли
